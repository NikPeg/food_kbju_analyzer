import asyncio
import logging
import torch
import torchvision.transforms as transforms
import clip
from PIL import Image
import io
import numpy as np
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from aiogram import F
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import os
import torch

from config import config
from model import create_model

logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'{config.LOGS_DIR}/bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class NutritionPredictor:
    def __init__(self, model_path, device):
        self.device = device
        
        self.model = create_model()
        
        try:
            if os.path.exists(model_path):
                checkpoint = torch.load(model_path, map_location=device)
                if 'model_state_dict' in checkpoint:
                    self.model.load_state_dict(checkpoint['model_state_dict'])
                else:
                    self.model.load_state_dict(checkpoint)
                logger.info(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å {model_path}")
            else:
                logger.warning(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ {model_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å.")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å.")
        
        self.model.to(device)
        self.model.eval()
        
    
        self.transform = transforms.Compose([
            transforms.Resize(224),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]
            )
        ])
    
    def predict(self, image, text_description=None):
        """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ë–ñ–£ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        try:
        
            if isinstance(image, bytes):
                image = Image.open(io.BytesIO(image))
            
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            input_tensor = self.transform(image).unsqueeze(0).to(self.device)
            
        
            text_tokens = None
            if text_description:
                try:
                    text_tokens = clip.tokenize([text_description], truncate=True).to(self.device)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
                    text_tokens = None
            
        
            with torch.no_grad():
                predictions = self.model(input_tensor, text_tokens)
            
        
            protein = predictions['protein'][0].cpu().item()
            fat = predictions['fat'][0].cpu().item()
            carbs = predictions['carbs'][0].cpu().item()
            calories = predictions['calories'][0].cpu().item()
            
            combination_weight = predictions['combination_weight'].cpu().item()
            bzu_proportions = predictions['bzu_proportions'][0].cpu().numpy()
            
            return {
                'protein': max(0, protein),
                'fat': max(0, fat),
                'carbs': max(0, carbs),
                'calories': max(0, calories),
                'combination_weight': combination_weight,
                'proportions': {
                    'protein_prop': bzu_proportions[0],
                    'fat_prop': bzu_proportions[1],
                    'carbs_prop': bzu_proportions[2]
                },
            
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
            return None

class NutritionVisualizer:
    @staticmethod
    def create_nutrition_chart(nutrition_data, food_name="–ë–ª—é–¥–æ"):
        plt.style.use('default')
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        fig.patch.set_facecolor('white')
        
        protein = nutrition_data['protein']
        fat = nutrition_data['fat'] 
        carbs = nutrition_data['carbs']
        calories = nutrition_data['calories']
        proportions = nutrition_data.get('proportions', {})
        
        colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']
        nutrients = ['–ë–µ–ª–∫–∏', '–ñ–∏—Ä—ã', '–£–≥–ª–µ–≤–æ–¥—ã']
        values = [protein, fat, carbs]
        
    
        if sum(values) > 0:
            wedges, texts, autotexts = ax1.pie(
                values, 
                labels=nutrients,
                colors=colors,
                autopct='%1.1f –≥',
                startangle=90,
                textprops={'fontsize': 11, 'fontweight': 'bold'}
            )
            
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
        else:
            ax1.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', ha='center', va='center', transform=ax1.transAxes)
        
        ax1.set_title(f'–°–æ—Å—Ç–∞–≤ –ë–ñ–£\n{food_name}', fontsize=14, fontweight='bold', pad=20)
        
    
        bars = ax2.bar(nutrients, values, color=colors, alpha=0.8, edgecolor='black', linewidth=1)
        
        for bar, value in zip(bars, values):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                    f'{value:.1f}–≥', ha='center', va='bottom', 
                    fontweight='bold', fontsize=11)
        
        ax2.set_title('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞ 100–≥', fontsize=14, fontweight='bold')
        ax2.set_ylabel('–ì—Ä–∞–º–º—ã', fontsize=12, fontweight='bold')
        ax2.grid(True, alpha=0.3, axis='y')
        ax2.set_ylim(0, max(values) * 1.2 if max(values) > 0 else 10)
        
    
        calorie_breakdown = [protein * 4, fat * 9, carbs * 4]
        if sum(calorie_breakdown) > 0:
            calorie_labels = [f'{nutrients[i]}\n{calorie_breakdown[i]:.0f} –∫–∫–∞–ª' for i in range(3)]
            
            wedges3, texts3, autotexts3 = ax3.pie(
                calorie_breakdown,
                labels=calorie_labels,
                colors=colors,
                autopct='%1.1f%%',
                startangle=90,
                textprops={'fontsize': 10, 'fontweight': 'bold'}
            )
            
            for autotext in autotexts3:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
                autotext.set_fontsize(9)
        else:
            ax3.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', ha='center', va='center', transform=ax3.transAxes)
        
        ax3.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π\n–í—Å–µ–≥–æ: {calories:.0f} –∫–∫–∞–ª', 
                     fontsize=14, fontweight='bold', pad=20)
        
    
        ax4.axis('off')
        
        info_text = f"""
        üçΩÔ∏è –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó

        üìä –ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã (–Ω–∞ 100–≥):
        ‚Ä¢ –ë–µ–ª–∫–∏: {protein:.1f}–≥ ({proportions.get('protein_prop', 0)*100:.1f}%)
        ‚Ä¢ –ñ–∏—Ä—ã: {fat:.1f}–≥ ({proportions.get('fat_prop', 0)*100:.1f}%)
        ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f}–≥ ({proportions.get('carbs_prop', 0)*100:.1f}%)

        ‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:
        ‚Ä¢ –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {calories:.0f} –∫–∫–∞–ª
        ‚Ä¢ –û—Ç –±–µ–ª–∫–æ–≤: {protein*4:.0f} –∫–∫–∞–ª
        ‚Ä¢ –û—Ç –∂–∏—Ä–æ–≤: {fat*9:.0f} –∫–∫–∞–ª  
        ‚Ä¢ –û—Ç —É–≥–ª–µ–≤–æ–¥–æ–≤: {carbs*4:.0f} –∫–∫–∞–ª


        üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
        ‚Ä¢ {'–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ—Å—Ç–∞–≤' if max(proportions.values()) < 0.6 else '–ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –æ–¥–∏–Ω –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç'}
        ‚Ä¢ {'–í—ã—Å–æ–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ –±–ª—é–¥–æ' if calories > 300 else '–°—Ä–µ–¥–Ω–µ–∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ –±–ª—é–¥–æ' if calories > 150 else '–ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ –±–ª—é–¥–æ'}

        ‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ !!!
        """
        
        ax4.text(0.05, 0.95, info_text, transform=ax4.transAxes, fontsize=11,
                verticalalignment='top', fontfamily='monospace',
                bbox=dict(boxstyle="round,pad=0.5", facecolor='lightgray', alpha=0.8))
        
        plt.suptitle(f'üçΩÔ∏è –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {food_name}', 
                    fontsize=18, fontweight='bold', y=0.98)
        
        plt.tight_layout()
        plt.subplots_adjust(top=0.93, bottom=0.05)
        
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=300, bbox_inches='tight', 
                   facecolor='white', edgecolor='none')
        buf.seek(0)
        plt.close()
        
        return buf

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

device = torch.device('cuda' if torch.cuda.is_available() and config.DEVICE == 'cuda' else 'cpu')
predictor = NutritionPredictor(config.MODEL_PATH, device)

@dp.message(Command("start"))
async def start_handler(message: Message):
    welcome_text = """
    üçΩÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–ñ–£–∫** 

    –Ø –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –ò–ò-–º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –±–ª—é–¥!

    üì∏ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
    ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞
    ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ë–ñ–£ –Ω–∞ 100–≥ –ø—Ä–æ–¥—É–∫—Ç–∞

    ‚ö° **–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è + —Ç–µ–∫—Å—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤, —É–≥–ª–µ–≤–æ–¥–æ–≤
    ‚Ä¢ –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π

    üöÄ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!**
        """
    
    await message.answer(welcome_text, parse_mode="Markdown")

@dp.message(Command("help"))
async def help_handler(message: Message):
    help_text = """
    üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ë–ñ–£–∫**

    üîπ **/start** - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    üîπ **/help** - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    üîπ **/status** - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

    üì∏ **–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ:**
    ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, WEBP
    ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB
    ‚Ä¢ –û–¥–Ω–æ –±–ª—é–¥–æ –Ω–∞ —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ

    üí¨ **–¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è:**
    ‚Ä¢ "Fried chiken with patatos"
    ‚Ä¢ "Pizza 4 cheese"

    ‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
    ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ (¬±15-25%)
    ‚Ä¢ –ù–µ –∑–∞–º–µ–Ω—è–µ—Ç —Ç–æ—á–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    ‚Ä¢ –õ—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –±–ª—é–¥–∞–º–∏
        """
    
    await message.answer(help_text, parse_mode="Markdown")


@dp.message(Command("status"))
async def status_handler(message: Message):
    status_text = f"""
    üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

    üîß **–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:** {device}
    üíæ **–ú–æ–¥–µ–ª—å:** {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞' if os.path.exists(config.MODEL_PATH) else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}
    üìÅ **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:** ‚úÖ OK
    üïê **–í—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

    {"üü¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ" if os.path.exists(config.MODEL_PATH) else "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞..."}
        """
    
    await message.answer(status_text, parse_mode="Markdown")

user_requests = {}

async def check_rate_limit(user_id: int) -> bool:
    current_time = datetime.now()
    
    if user_id not in user_requests:
        user_requests[user_id] = []
        user_requests[user_id] = [
        t for t in user_requests[user_id] 
        if (current_time - t).total_seconds() < 60
    ]
    
    if len(user_requests[user_id]) >= config.MAX_REQUESTS_PER_MINUTE:
        return False
    
    user_requests[user_id].append(current_time)
    return True

@dp.message(F.photo)
async def handle_photo(message: Message):
    
    try:
        if not await check_rate_limit(message.from_user.id):
            await message.answer(" –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            return
        
        photo = message.photo[-1]
        if photo.file_size > config.MAX_FILE_SIZE:
            await message.answer(f"‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {config.MAX_FILE_SIZE // 1024 // 1024}MB. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
            return
        processing_msg = await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é –ò–ò-–º–æ–¥–µ–ª–∏...")
        
        file_info = await bot.get_file(photo.file_id)
        photo_bytes = await bot.download_file(file_info.file_path)
        
        text_description = message.caption if message.caption else None
        food_name = text_description if text_description else "–í–∞—à–µ –±–ª—é–¥–æ"
        
        nutrition_data = predictor.predict(photo_bytes.read(), text_description)
        
        if nutrition_data is None:
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return
        
        chart_buffer = NutritionVisualizer.create_nutrition_chart(nutrition_data, food_name)
        
        response_text = f"""
        üçΩÔ∏è **–ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞: {food_name}**

        üìä **–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 100–≥:**
        ü•© –ë–µ–ª–∫–∏: **{nutrition_data['protein']:.1f}–≥**
        üßà –ñ–∏—Ä—ã: **{nutrition_data['fat']:.1f}–≥** 
        üçû –£–≥–ª–µ–≤–æ–¥—ã: **{nutrition_data['carbs']:.1f}–≥**

        ‚ö° **–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {nutrition_data['calories']:.0f} –∫–∫–∞–ª**


        {'üìù *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏*' if text_description else 'üí° *–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞*'}
                """
        
        chart_file = BufferedInputFile(chart_buffer.getvalue(), filename="nutrition_chart.png")
        await message.answer_photo(
            photo=chart_file,
            caption=response_text,
            parse_mode="Markdown"
        )
        
        await processing_msg.delete()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message()
async def handle_text(message: Message):
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞.",
        reply_to_message_id=message.message_id
    )

async def cleanup_old_requests():
    """–†–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    while True:
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        current_time = datetime.now()
        for user_id in list(user_requests.keys()):
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 90  —Å–µ–∫—É–Ω–¥
            user_requests[user_id] = [
                t for t in user_requests[user_id] 
                if (current_time - t).total_seconds() < 90
            ]
            
            if not user_requests[user_id]:
                del user_requests[user_id]

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –ë–ñ–ñ–ñ–ñ–£–∫...")
    logger.info(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    logger.info(f"–ú–æ–¥–µ–ª—å: {config.MODEL_PATH}")
    logger.info(f"–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: {'–ó–∞–≥—Ä—É–∂–µ–Ω–∞' if os.path.exists(config.MODEL_PATH) else '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    asyncio.create_task(cleanup_old_requests())
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    if hasattr(asyncio, 'WindowsProactorEventLoopPolicy'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
