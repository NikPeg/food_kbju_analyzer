import yaml
import subprocess
import os
import signal
import sys
import socket
import time

class VLLMServer:
    PID_FILE = ".vllm_server.pid"
    LOG_FILE = "vllm_server.log"

    def __init__(self, config_path: str, hf_token: str = ""):
        self.config = self._load_config(config_path)
        self.process = None
        self.hf_token = hf_token
        self._cleanup_old_server()
        self._start_server()

    def _load_config(self, path):
        with open(path, "r") as f:
            return yaml.safe_load(f)

    def _cleanup_old_server(self):
        if os.path.exists(self.PID_FILE):
            try:
                with open(self.PID_FILE, "r") as f:
                    pid = int(f.read())
                os.killpg(pid, signal.SIGINT)
                print(f"–£–±–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å vLLM —Å PGID={pid}")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å: {e}")
            os.remove(self.PID_FILE)
            # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ª–æ–≥
            if os.path.exists(self.LOG_FILE):
                os.remove(self.LOG_FILE)

    def _wait_for_port(self, host: str, port: int):
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞ {port} –Ω–∞ {host}‚Ä¶")
        while True:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(1.0)
                try:
                    sock.connect((host, port))
                    print(f"‚úÖ –ü–æ—Ä—Ç {port} –Ω–∞ {host} –æ—Ç–∫—Ä—ã—Ç ‚Äî —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤.")
                    return
                except (ConnectionRefusedError, socket.timeout):
                    time.sleep(0.5)

    def _start_server(self):
        model = self.config["model"]
        tensor_parallel_size = self.config.get("tensor_parallel_size")
        max_num_seqs = self.config.get("max_num_seqs")
        dtype = self.config.get("dtype")
        port = self.config.get("port")
        host = self.config.get("host")
        served_model_name = self.config.get("served_model_name")
        max_model_len = self.config.get("max_model_len")

        env = os.environ.copy()
        env["HUGGING_FACE_HUB_TOKEN"] = self.hf_token

        cmd = [
            sys.executable, "-m", "vllm.entrypoints.openai.api_server",
            "--model", model,
            "--tensor-parallel-size", str(tensor_parallel_size),
            "--max-num-seqs", str(max_num_seqs),
            "--dtype", dtype,
            "--port", str(port),
            "--host", host,
            "--served-model-name", served_model_name,
        ]
        if  max_model_len:
            cmd.extend(
                [
                    "--max-model-len", str(max_model_len)
                ]
            )
        cmd = [arg for arg in cmd if arg]

        print(f"üöÄ –ó–∞–ø—É—Å–∫ vLLM-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port} —Å –º–æ–¥–µ–ª—å—é {model}‚Ä¶")
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞ –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        log_f = open(self.LOG_FILE, "a")
        # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –±—ã–ª–æ —É–¥–æ–±–Ω–æ —É–±–∏—Ç—å –≤—Å—ë –≤–º–µ—Å—Ç–µ
        self.process = subprocess.Popen(
            cmd,
            stdout=log_f,
            stderr=log_f,
            preexec_fn=os.setsid,
            env=env
        )
        with open(self.PID_FILE, "w") as f:
            f.write(str(self.process.pid))

        # –∂–¥—ë–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –Ω–∞—á–Ω—ë—Ç —Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç
        self._wait_for_port(host, port)
        print(f"üìú –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–∏—à—É—Ç—Å—è –≤ —Ñ–∞–π–ª: {self.LOG_FILE}")

    def stop(self):
        if self.process and self.process.poll() is None:
            pgid = self.process.pid
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ vLLM-—Å–µ—Ä–≤–µ—Ä–∞ (SIGINT –≥—Ä—É–ø–ø–µ)‚Ä¶")
            os.killpg(pgid, signal.SIGINT)
            try:
                self.process.wait()
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
                print("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≥—Ä—É–±–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è‚Ä¶")
                os.killpg(pgid, signal.SIGTERM)
                try:
                    self.process.wait()
                except Exception:
                    print("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ‚Ä¶")
                    os.killpg(pgid, signal.SIGKILL)

            self.process = None

        if os.path.exists(self.PID_FILE):
            os.remove(self.PID_FILE)

    def __del__(self):
        self.stop()
